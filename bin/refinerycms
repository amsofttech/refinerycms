#!/usr/bin/env ruby
require 'pathname'
require 'fileutils'
require 'optparse'

# Load bundler
begin
  require 'rubygems'
  require 'bundler'
rescue LoadError
  puts "\n=== ACTION REQUIRED ===\n\n"
  puts "Could not load the bundler gem. This is a required dependency of Refinery CMS."
  puts "Please install it with `gem install bundler`.\n\n"
  exit
end

# Load rails
require 'rails'

# Load refinerycms
require Pathname.new(File.expand_path(File.dirname(__FILE__) << "/..")).join('vendor', 'refinerycms', 'core', 'lib', 'refinery.rb')

module Refinery
  class AppGenerator

    def initialize(input)
      # Default options
      @input = input
      @options = {
        :database => :sqlite3,
        :force => false
      }

      @optparse = OptionParser.new do |opts|
        opts.banner = "Purpose: Installs Refinery CMS to the specified directory"
        opts.banner << "\nUsage:   #{opts.program_name} /path/to/project [options]"

        opts.separator ""
        opts.separator "Specific Options:"

        # Rails supports more options, but Refinery is only tested on these three
        databases = [:mysql, :postgresql, :sqlite3]
        opts.on("-d DATABASE", "--database DATABASE", databases, "Select the database (default sqlite3)", "  #{databases.join('/')}") do |db|
          @options[:database] = db
        end

        opts.on("-f", "--force", "Force overwriting of directory") do
          @options[:force] = true
        end

        opts.separator ""
        opts.separator "Common options:"

        opts.on_tail("-h", "--help", "Display this screen") do
          puts opts
          exit
        end

        opts.on_tail("-v", "--version", "Display the version") do
          puts Refinery.version
          exit
        end
      end
    end

    def run!
      # Check for valid input
      begin
        @optparse.parse!(@input)
      rescue OptionParser::ParseError => pe
        puts pe
        puts "\n"
        puts @optparse
        exit
      end

      # Ensure only one path is specified
      unless @input.size == 1
        puts "Please specify a single path to install Refinery CMS"
        puts "\n"
        puts @optparse
        exit
      end

      # Get the name and path of the new application
      @app_path = Pathname.new(File.expand_path(@input.first))
      @app_name = @app_path.to_s.split(File::SEPARATOR).last
      
      # Generate a Refinery CMS application
      generate!
    end
  
    private
    
    def generate!
      # Generate a rails application
      rails_command = "rails new #{@app_path}"
      rails_command << " --database #{@options[:database]}"
      rails_command << " --force" if @options[:force]
      rails_command << " --skip-test-unit --skip-prototype"
      run_command(rails_command, false)
      
      # Add in the Refinery specifics to the application
      hack!

      puts "\n---------"
      puts "Refinery successfully installed in '#{@app_path}'!\n\n"

      # Automate
      puts "Installing gem requirements using bundler..\n"
      run_command("bundle install")

      puts "\n\nSetting up your development database..\n"
      run_command("rake -f '#{@app_path.join('Rakefile')}' db:setup")
      # End automation

      # Output helpful messages
      puts "\n=== ACTION REQUIRED ==="
      puts "Now you can launch your webserver using:"
      puts "\ncd #{@app_path}"
      puts "rails server"
      puts "\nThis will launch the built-in webserver at port 3000."
      puts "You can now see your site running in your browser at http://localhost:3000"
      puts "\nThanks for installing Refinery, enjoy creating your new application!"
      puts "---------\n\n"
    end

    def hack!
      # Overwrite rails defaults with refinery defaults
      %w(app db).each do |folder|
        FileUtils::cp_r Refinery.root.join(folder), @app_path, :verbose => false
      end
      %w(.gitignore config/routes.rb config/initializers/acts_as_indexed_config.rb 
          config/initializers/field_with_error_fix.rb config/initializers/fix_rack.rb).each do |file|
        FileUtils::cp_r Refinery.root.join(file), @app_path.join(file), :verbose => false
      end
      
      # Remove public/index.html
      FileUtils::rm @app_path.join('public', 'index.html')
      
      # Add refinery gems to the Gemfile
      gemfile_contents = File.read(Refinery.root.join('Gemfile'))
      refinery_gems = gemfile_contents.match(/# REFINERY CMS =+.*# END REFINERY CMS =+/m)[0]
      File.open(@app_path.join('Gemfile'), "a") do |f|
        f.write "\n" + refinery_gems
      end
      
      # Hack to make work on development computers
      # TODO: Change this when gem is released
      find_and_replace('Gemfile', "path 'vendor/refinerycms' do", 
                        "path '#{Pathname.new(File.expand_path(File.dirname(__FILE__) << "/..")).join('vendor').to_s}/refinerycms' do")

      # Replace app constant with Refinery
      # TODO: Find a way around this
      %w(Rakefile config.ru config/application.rb config/environment.rb
          config/environments/development.rb config/environments/production.rb config/environments/test.rb
          config/initializers/secret_token.rb config/initializers/session_store.rb).each do |hackable|
        find_and_replace(hackable, @app_name.camelize, "Refinery")
      end

      # Remove development specific stuff from the .gitinore file
      find_and_replace('.gitignore', /# REFINERY CMS DEVELOPMENT =+.*# END REFINERY CMS DEVELOPMENT =+/m, '')
    end

    protected

    def run_command(command, cd = true)
      to_run = (RUBY_PLATFORM =~ /mswin32/ ? "cmd /c " : "")
      to_run << "cd #{@app_path} && " if cd
      to_run << command

      puts "Running: " + to_run
      puts `#{to_run}`
    end
    
    def find_and_replace(file, find, replace)
      contents = File.read(@app_path.join(file))
      contents.gsub!(find, replace)
      File.open(@app_path + file, "w") do |f|
        f.puts contents  
      end
    end

  end
end

generator = Refinery::AppGenerator.new(ARGV)
generator.run!